@model Stankins.Interfaces.IDataToSent
@{

string ClassNameFromTableName(string tableName){
		return tableName.Replace(" ","").Replace(".","").Replace("(","").Replace(")","");
	}
	string nameProperty(string original, string nameClass){
		var name = original.ToLower().Replace(" ","").Replace("event","event1").Replace("-","_").Replace("class","class1").Replace("object","object1").Replace("<","").Replace("/","").Replace(">","").Replace("(","").Replace(")","").ToLower();
		if(!IsIdentifier(name))
			name = "generated_"+name;
		if(nameClass.ToLower() == name)
            name= "generated_"+name;
		return RemoveAccents(ToAlphaNumeric(name.Trim()));
	}
string RemoveAccents(string text)
        {
            var sbReturn = new System.Text.StringBuilder();
            var arrayText = text.Normalize(System.Text.NormalizationForm.FormD).ToCharArray();
            foreach (char letter in arrayText)
            {
                if (System.Globalization.CharUnicodeInfo.GetUnicodeCategory(letter) != System.Globalization.UnicodeCategory.NonSpacingMark)
                    sbReturn.Append(letter);
            }
            return sbReturn.ToString();
        }

    string ToAlphaNumeric(string input)
    {
        int j = 0;
        char[] newCharArr = new char[input.Length];

        for (int i = 0; i < input.Length; i++)
        {
            if (char.IsLetterOrDigit(input[i]))
            {
                newCharArr[j] = input[i];
                j++;
            }
        }

        System.Array.Resize(ref newCharArr, j);

        return new string(newCharArr);
    }
	//https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.syntaxfacts?view=roslyn-dotnet
	bool IsIdentifier(string text)
	{
     if (string.IsNullOrEmpty(text))
        return false;
     if (!char.IsLetter(text[0]) && text[0] != '_')
        return false;
     for (int ix = 1; ix < text.Length; ++ix)
        if (!char.IsLetterOrDigit(text[ix]) && text[ix] != '_')
           return false;
     return true;
	}
    var dt= Model.FindAfterName("@Name@").Value;
    var nameTable = dt.TableName;
    string nameClass= ClassNameFromTableName(dt.TableName);
    var dtOptions= Model.FindAfterName("@@Options@@").Value;
    var nrPK = (int.Parse(dtOptions.Rows.Find(nameTable +"_PK_Number")[1].ToString())  );
    
    string idTable ="", idType = "",idTableSecond = "",idTypeSecond = "";
    if(nrPK>0){
        idTable = dtOptions.Rows.Find(dt.TableName +"_PK_0")[1].ToString();
        idType = dtOptions.Rows.Find(dt.TableName +"_PK_0_Type")[1].ToString(); 
        idTable = nameProperty(idTable,nameClass); 	
    }
    if(nrPK>1){
        idTableSecond = dtOptions.Rows.Find(dt.TableName +"_PK_1")[1].ToString();
        idTypeSecond = dtOptions.Rows.Find(dt.TableName +"_PK_1_Type")[1].ToString(); 
        idTableSecond = nameProperty(idTableSecond,nameClass); 	
    }
	
      var nrCols =dt.Columns.Count;
    string repo= nameClass  + "_Repository";
    string typeRepository = "IRepositoryView<"+ nameClass +">";
    switch(nrPK){
        case 0:
            break;
        case 1:
            typeRepository = "IRepository<" + (nameClass) + "," + (idType) + ">";
            break;
        default:
            typeRepository = "IRepository<" + (nameClass) + "," + (idType) + ","+ idTypeSecond + ">";
            break;
    }
    var objFields="";
    var nameFields="";
    var valFields="";
      for(int iCol = 0;iCol < nrCols; iCol++){
        var col = dt.Columns[iCol];
        var colType = col.DataType;
        nameFields +=nameProperty(col.ColumnName,nameClass) +",";
        valFields += "''," ;
        objFields+="obj."+nameProperty(col.ColumnName,nameClass )+",";

      }
    
}


<span> Welcome to @nameClass. Number Records: <span data-bind="text: nrRecords"></span></span>
<a  data-bind="attr: { href: urlAdd }">Add new </a>
    <div>
        <table border="5">

            <thead>
                <tr>
                <th>Number</th>
             @{
                for(int iCol = 0;iCol < nrCols; iCol++){
                     var col = dt.Columns[iCol];
                    <text>
                <th>@col.ColumnName</th>
                    </text>
                }
            }
            <th>
            Actions
            </th>
                </tr>
               

            </thead>

            <tbody data-bind="foreach: @(nameClass)Liste">
                <tr class="tdata">
                    <td data-bind="text: $parent.recordNumber($index() + 1)"></td>
                    @{
                      for(int iCol = 0;iCol < nrCols; iCol++){
                            var col = dt.Columns[iCol];
                        <text>
                    <td data-bind="text: @nameProperty(col.ColumnName,nameClass)"></td>
                        </text>
                        }
                    }
                <td>
                    @{
                        if(nrPK==1){
                            <a  data-bind="attr: { href: urlEdit }">Edit</a>
                            <button data-bind="click: $root.delete_@(nameClass)">Delete</button>
                        }
                    }
                </td>

                </tr>
            </tbody>
        </table>
    </div>
    <span>Current page:<span data-bind="text: pageIndex"></span></span>
    <span>Max pages: <span data-bind="text: maxPageIndex"></span></span>
    <div class="pagination">
<ul data-bind="foreach:new Array(maxPageIndex())">
        <li >
            <a href="#" data-bind="text:$index() +1 , click: $parent.gotoPage.bind($data,$index()+1)">0</a>
        </li>
    </ul>
</div>
 <select  data-bind="options: pageSizeOptions, value: pageSize, event: { change: onPageSizeChange }"  />

<span data-bind="text: pageIndex" ></span>

@@section Scripts{
    <script>
    function ko@(nameClass)(@nameFields x)
        {
            var self = this;
            @{
                for(int iCol = 0;iCol < nrCols; iCol++){
                     var col = dt.Columns[iCol];
                    <text>
                self.@(nameProperty(col.ColumnName,nameClass)) = @(nameProperty(col.ColumnName,nameClass));
                    </text>
                }
            }
        @if(nrPK == 1){
            <text>
                self.urlEdit='/admin@(nameClass)/Edit/' + @(idTable);
                self.urlDelete='/admin@(nameClass)/Delete/' + @(idTable);
            </text>

        }            
        }
    function All@(nameClass)() {
            var self = this;
            self.nrRecords = ko.observable(0);
            self.@(nameClass)Liste = ko.observableArray([
                new ko@(nameClass)(@Raw(valFields) 1)
            ]);
            self.pageSize = ko.observable(10);
            self.pageIndex = ko.observable(1);
            self.maxPageIndex = ko.computed(function() {
                return Math.ceil(this.nrRecords() / this.pageSize()) ;
            }, self);
            self.urlAdd='/admin@(nameClass)/Add/';
            self.removeItem = function (data) {
                self.@(nameClass)Liste.remove(data);
            }
            self.pageSizeOptions = ko.observableArray([10, 25, 50, 100, 250, 500]);
            self.onPageSizeChange = function() {
                self.pageIndex(1);
                self.loadList();
            };

            self.recordNumber = function (data) {
                var s = (self.pageIndex() - 1) * self.pageSize() + data;
                return s;
                }

            self.gotoPage = function (data) {
                self.pageIndex(data);
                self.loadList();
            };

            
            
            self.loadList=function () {
                
                var url='@@Url.Content("/api/@(nameClass)/SearchPaginated")';
                var obj = {
                    pagination: {
                        "pageSize": self.pageSize(),
                        "pageNo": self.pageIndex()
                    }
                }
                $.ajax({
                    contentType: 'application/json',
                    data: JSON.stringify(obj),
                    dataType: 'json',
                    success: function (data) {
                        //window.alert(JSON.stringify(data));
                        var nr = data.nr;
                        var rec = data.records;
                        //window.alert("total records:"+nr);
                        self.nrRecords(nr);
                        var arr = [];
                        self.@(nameClass)Liste([]);
                        //console.log(rec);
                        for (var i = 0; i < rec.length; i++) {
                            var obj = rec[i];
                            arr.push(new ko@(nameClass)(@objFields 1));

                        };
                        // window.alert(arr.length);
                //     window.alert('wait to display ' + arr.length + 'records');
                        self.@(nameClass)Liste(arr);
                //    window.alert('done');

                    },
                    error: function () {
                        window.alert("failed");
                    },

                    type: 'POST',
                    url: url
                });




            }
            self.delete_@(nameClass)=  function(element){
                if(!window.confirm("do you want to delete id "+ element.@(idTable))){
                        return;
                }   
                var url='@@Url.Content("/api/@(nameClass)/Delete/")'+ element.@(idTable);
                $.ajax({
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (data) {
                                                    
                        window.alert('deleted');
                        self.removeItem(element);
                    },
                    error: function () {
                        window.alert("failed");
                    },

                    type: 'Delete',
                    url: url
                });

                }

        }
  var  all@(nameClass) = new  All@(nameClass)();
        ko.applyBindings(all@(nameClass));
        all@(nameClass).onPageSizeChange();

    </script>
}
