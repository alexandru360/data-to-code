@model Stankins.Interfaces.IDataToSent
@{
    
	string ClassNameFromTableName(string tableName){
		return tableName.Replace(" ","").Replace(".","").Replace("(","").Replace(")","");
	}
	
    var ds= Model.FindAfterName("DataSource").Value;
    var dtOptions= Model.FindAfterName("@@Options@@").Value;

    var dataSource = dtOptions.Rows.Find("DataSource")[1].ToString();
    var host =  dtOptions.Rows.Find("DataSourceConnectionHost")?[1]?.ToString();
    var user =  dtOptions.Rows.Find("DataSourceConnectionUser")?[1]?.ToString();
    var pwd =  dtOptions.Rows.Find("DataSourceConnectionPassword")?[1]?.ToString();
    var db =  dtOptions.Rows.Find("DataSourceConnectionDatabase")?[1]?.ToString();
    var port =  dtOptions.Rows.Find("DataSourceConnectionPort")?[1]?.ToString();
    

    var nrRowsDS=ds.Rows.Count;
    
    var nameTablesToRender = new string[nrRowsDS];
    var tables=new System.Data.DataTable[nrRowsDS];
    for (int iRowDS = 0; iRowDS < nrRowsDS; iRowDS++)
    {
        var nameTable = ds.Rows[iRowDS]["TableName"].ToString();
        var renderTable = Model.FindAfterName(nameTable).Value;
        nameTablesToRender[iRowDS] = nameTable;
        tables[iRowDS]=renderTable;
    }
	string nameProperty(string original, string nameClass){
		var name = original.ToLower().Replace(" ","").Replace("event","event1").Replace("class","class1").Replace("object","object1").Replace("<","").Replace("/","").Replace(">","").Replace("(","").Replace(")","").ToLower();
		if(!IsIdentifier(name))
			name = "generated_"+name;
		if(nameClass.ToLower() == name)
            name= "generated_"+name;
		return name.Trim();
	}
	//https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.syntaxfacts?view=roslyn-dotnet
	bool IsIdentifier(string text)
	{
     if (string.IsNullOrEmpty(text))
        return false;
     if (!char.IsLetter(text[0]) && text[0] != '_')
        return false;
     for (int ix = 1; ix < text.Length; ++ix)
        if (!char.IsLetterOrDigit(text[ix]) && text[ix] != '_')
           return false;
     return true;
	}

}
{
  "dbConns": [
    {
      "default": true,
      "migrations": false,

      @switch(dataSource){
        case "SqlServerInMemory":
        case "MSSQL":
            <text>
            "dialect": "mssql",
            </text>
        break;
        case "MariaDB":
        case "MYSQL":
            <text>
            "dialect": "mysql",
            </text>
        break;
        default:
            <text>
            "dialect": "NO SUCH DIALECT",
            </text>
            break;
    }

          
      
      "timestamps": false,
      "conn": {
        "host": "@(host)",
        "user": "@(user)",
        "password": "@(pwd)",
        "database": "@(db)",
        "port": @(port),
        "logging": true
      },
      "schema": "",
      "timezone": "+02:00"
    }
  ],
  "apiPort": 3000,
  "apiRouteMain": "api",
  "publicRoutes": [
    {
      "path": "src/controllers/health-check",
      "name": "health-check"
    }
    
      @foreach(var nameTable in nameTablesToRender){
        string nameClass=ClassNameFromTableName(nameTable);
        <text>
        ,{
        "path": "src/controllers/@(nameClass)-controller",
        "name": "@(nameClass)"
        }
        </text>
      
    }
  ]
}
