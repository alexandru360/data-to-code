//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
namespace {{NamespaceName}} {

    /// <summary>
    /// Generates code from  {{ClassName}}
    /// </summary>
  [GeneratedCode("AOPEF", "{{version}}")]

  [CompilerGenerated]
  partial class {{ClassName}}{ 
   /*
    public int id(){
    System.Diagnostics.Debugger.Break();
    return 1;
    }
    */
    public Task<{{POCOFullName}}[]> GetAll()
    {
        return databaseContext.{{POCOName}}.ToArrayAsync();
    }
    public Task<long> Count()
    {
        return databaseContext.{{POCOName}}.LongCountAsync();
    }
    //very particular TestWebAPI_Searches
    public async Task<TestWebAPI_Searches.PaginatedRecords<{{POCOFullName}}>> SearchPaginated(TestWebAPI_Searches.SearchModel<{{POCOFullName}}> search)
    {
        var query = search.GetSearch(databaseContext.{{POCOName}}, paginated:false);
        var nr = await query.LongCountAsync();
        query = search.GetSearch(databaseContext.{{POCOName}}, paginated: true);
        var data = await query.ToArrayAsync();
        return new TestWebAPI_Searches.PaginatedRecords<{{POCOFullName}}>(nr, data);
         
    }

    public Task<{{POCOFullName}}> FindSingle(Func<{{POCOFullName}} ,bool> f)
    {
        var data = databaseContext.{{POCOName}}.FirstOrDefaultAsync(it=>f(it));
        return data;
    }
    public Task<{{POCOFullName}}[]> FindMultiple(System.Linq.Expressions.Expression<Func<{{POCOFullName}}, bool>> f)
    {
        var data = databaseContext.{{POCOName}}.Where(f);
        return data.ToArrayAsync();
    }

    public async Task<{{POCOFullName}}> Insert({{POCOFullName}} p)
    {
        databaseContext.{{POCOName}}.Add(p);
        await databaseContext.SaveChangesAsync();
        return p;
    }

    public async Task<{{POCOFullName}}> Update({{POCOFullName}} p)
        {
            var original = await FindAfterId(p.{{PK1}}, p.{{PK2}});
            if(original == null)
            {
                throw new ArgumentException($"cannot found {{POCOName}}  with id = {p.{{PK1}}} ", nameof(p.{{PK1}}));
            }
            original.CopyPropertiesFrom(other: p);                        
            await databaseContext.SaveChangesAsync();
            return p;
        }
        public async Task<{{POCOFullName}}> Delete({{PK1Type}} id1, {{PK2Type}} id2)
        {
            var original = await FindAfterId(id1, id2);
            databaseContext.{{POCOName}}.Remove(original);
            await databaseContext.SaveChangesAsync();
            return original;
        }
    public Task<{{POCOFullName}}> Delete({{POCOFullName}} p)
        {
            return Delete(p.{{PK1}}, p.{{PK2}});
        }
        public Task<{{POCOFullName}}[]> FindAfterIds(string namePK, {{PK1Type}}[] id1, {{PK2Type}}[] id2){
            System.Linq.IQueryable<{{POCOFullName}}> query = databaseContext.{{POCOName}};
            switch(namePK){
                case "{{PK1}}":
                    if((id1?.Length??0)>0) {
                       query = query.Where(it=> id1.Contains( it.{{PK1}} ) );           
                    }
                    break;
                case "{{PK2}}":
                    if((id2?.Length??0)>0) {
                       query = query.Where(it=> id2.Contains( it.{{PK2}} ) );           
                    }
                    break;
                default:
                    throw new ArgumentException("namePK should be either{{PK1}}, either {{PK2}} ");
            }            
            return query.ToArrayAsync();
        }

        public Task<{{POCOFullName}}> FindAfterId({{PK1Type}} id1, {{PK2Type}} id2)
        {
            var data = databaseContext.{{POCOName}}.FirstOrDefaultAsync(it => 
                    it.{{PK1}} == id1
                    &&
                    it.{{PK2}} == id2
                    );
            return data;
        }
        
  }
}              